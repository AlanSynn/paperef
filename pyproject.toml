[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "paperef"
version = "0.1.0"
description = "PDF to Markdown converter with automatic BibTeX generation"
authors = [
    {name = "Alan Synn", email = "alan@alansynn.com"}
]
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "selenium>=4.9.0,<4.16.0",
    "bibtexparser>=1.4.0",
    "requests>=2.31.0",
    "rich>=13.7.0",
    "tqdm>=4.66.0",
    "numpy>=1.26.4,<2.0.0",
    "python-dotenv>=1.0.0",
    "PyMuPDF>=1.23.0",
    "typer>=0.9.0",
    "click>=8.0.0",
    "pydantic>=2.0.0",
    "loguru>=0.7.0",
]

[project.optional-dependencies]
vlm = [
    "torch>=2.4.0,<2.5.0 ; platform_machine != 'x86_64'",
    "torchvision>=0.19.0 ; platform_machine != 'x86_64'",
    "transformers>=4.30.0",
    "accelerate>=0.20.0",
    "docling>=2.0.0 ; platform_machine != 'x86_64'",
]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "coverage>=7.0.0",
]

[tool.uv]
dev-dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
    "pre-commit>=3.0.0",
    "coverage>=7.0.0",
]

[project.scripts]
paperef = "paperef.cli.main:app"

[tool.hatch.build.targets.wheel]
packages = ["paperef"]

[tool.ruff]
line-length = 144
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "C90", # mccabe
    "DJ",  # flake8-django
    "EM",  # flake8-errmsg
    "EXE", # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PD",  # pandas-vet
    "PGH", # pygrep-hooks
    "PL",  # pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # numpy
    "AIR", # airflow
    "PERF", # perflint
    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # ruff-specific rules
]

ignore = [
    "S101",    # Use of `assert` detected
    "S104",    # Possible binding to all interfaces
    "COM812",  # Missing trailing comma
    "ISC001",  # Implicitly concatenated string literals
    "T201",    # `print` found
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default positional argument in function definition
    "FBT003",  # Boolean positional arg in function call
    "A003",    # Class attribute shadows a python builtin
    "PLR0913", # Too many arguments to function call
    "PLR2004", # Magic value comparison
    "C901",    # Complex structure
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "ERA001",  # Found commented-out code
    "PD",      # pandas-vet (not using pandas)
    "NPY",     # numpy (not using numpy)
    "AIR",     # airflow (not using airflow)
    "DJ",      # django (not using django)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = [
    "S101",    # Use of `assert` detected
    "PLR2004", # Magic value comparison
    "SLF001",  # Private member accessed (allowed in tests)
    "PLC0415", # Import should be at top level (allowed in tests)
]
"scripts/*" = ["T201", "S603", "S607"]
"tools/*" = ["T201", "S603", "S607"]

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 12
max-returns = 6
max-statements = 50

[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["paperef"]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "docling.*",
    "selenium.*",
    "bibtexparser.*",
    "fitz.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["paperef/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

[tool.coverage.run]
source = ["paperef"]
omit = [
    "paperef/tests/*",
    "paperef/tools/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
